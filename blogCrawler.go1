package main

import (
	"bufio"
	"log"
	"os"
	"regexp"
	"strings"
)

const templateDir string = "./template/"
const staticDir string = "./static/"
const blogDir string = "./blog/"

type ArchiveEntry struct {
	title    string
	isYear   bool
	fileName string
}

// the title finding function should not be run everytime you update the page,
// it should be run on a loop in a different thread every hour or so
func completeArchives() []ArchiveEntry {
	var archiveEntries []ArchiveEntry
	archiveEntry := ArchiveEntry{}
	lastYear := "XX"
	re := regexp.MustCompile(`<title>[^<]*`)
	files, err := os.ReadDir(blogDir)
	if err != nil {
		log.Fatal(err)
	}
	i := 0
	for _, f := range files {
		archiveEntry = ArchiveEntry{}
		presentYear := strings.Split(f.Name(), "-")[0]

		if presentYear != lastYear {
			//make a new entry and don't do the rest
			archiveEntry.title = presentYear
			archiveEntry.isYear = true
			lastYear = presentYear
			archiveEntries = append(archiveEntries, archiveEntry)
			i = i + 1
		}
		var titleFound bool = false
		archiveEntry.fileName = f.Name()
		readFile, err := os.Open(blogDir + f.Name())

		if err != nil {
			log.Fatalf("failed to open file: %s", err)
		}
		fileScanner := bufio.NewScanner(readFile)
		fileScanner.Split(bufio.ScanLines)
		var fileTextLines []string

		for fileScanner.Scan() {
			fileTextLines = append(fileTextLines, fileScanner.Text())
		}
		readFile.Close()
		for _, eachline := range fileTextLines {
			if re.MatchString(eachline) {
				archiveEntry.title =
					strings.ReplaceAll(re.FindString(eachline), "<title>", "")
				titleFound = true
			}
		}
		if !titleFound {
			archiveEntry.title = archiveEntry.fileName
		}
		archiveEntries = append(archiveEntries, archiveEntry)
		i = i + 1
	}
	return archiveEntries
}

func main() {
	titles := completeArchives()
	log.Println(titles)
}
